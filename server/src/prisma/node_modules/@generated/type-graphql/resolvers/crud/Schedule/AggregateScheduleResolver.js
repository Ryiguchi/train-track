"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateScheduleResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateScheduleArgs_1 = require("./args/AggregateScheduleArgs");
const Schedule_1 = require("../../../models/Schedule");
const AggregateSchedule_1 = require("../../outputs/AggregateSchedule");
const helpers_1 = require("../../../helpers");
let AggregateScheduleResolver = class AggregateScheduleResolver {
    async aggregateSchedule(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
};
exports.AggregateScheduleResolver = AggregateScheduleResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateSchedule_1.AggregateSchedule, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateScheduleArgs_1.AggregateScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AggregateScheduleResolver.prototype, "aggregateSchedule", null);
exports.AggregateScheduleResolver = AggregateScheduleResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Schedule_1.Schedule)
], AggregateScheduleResolver);
