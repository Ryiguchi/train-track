import type { GraphQLResolveInfo } from "graphql";
import { AggregateWorkoutArgs } from "./args/AggregateWorkoutArgs";
import { CreateManyWorkoutArgs } from "./args/CreateManyWorkoutArgs";
import { CreateOneWorkoutArgs } from "./args/CreateOneWorkoutArgs";
import { DeleteManyWorkoutArgs } from "./args/DeleteManyWorkoutArgs";
import { DeleteOneWorkoutArgs } from "./args/DeleteOneWorkoutArgs";
import { FindFirstWorkoutArgs } from "./args/FindFirstWorkoutArgs";
import { FindFirstWorkoutOrThrowArgs } from "./args/FindFirstWorkoutOrThrowArgs";
import { FindManyWorkoutArgs } from "./args/FindManyWorkoutArgs";
import { FindUniqueWorkoutArgs } from "./args/FindUniqueWorkoutArgs";
import { FindUniqueWorkoutOrThrowArgs } from "./args/FindUniqueWorkoutOrThrowArgs";
import { GroupByWorkoutArgs } from "./args/GroupByWorkoutArgs";
import { UpdateManyWorkoutArgs } from "./args/UpdateManyWorkoutArgs";
import { UpdateOneWorkoutArgs } from "./args/UpdateOneWorkoutArgs";
import { UpsertOneWorkoutArgs } from "./args/UpsertOneWorkoutArgs";
import { Workout } from "../../../models/Workout";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateWorkout } from "../../outputs/AggregateWorkout";
import { WorkoutGroupBy } from "../../outputs/WorkoutGroupBy";
export declare class WorkoutCrudResolver {
    aggregateWorkout(ctx: any, info: GraphQLResolveInfo, args: AggregateWorkoutArgs): Promise<AggregateWorkout>;
    createManyWorkout(ctx: any, info: GraphQLResolveInfo, args: CreateManyWorkoutArgs): Promise<AffectedRowsOutput>;
    createOneWorkout(ctx: any, info: GraphQLResolveInfo, args: CreateOneWorkoutArgs): Promise<Workout>;
    deleteManyWorkout(ctx: any, info: GraphQLResolveInfo, args: DeleteManyWorkoutArgs): Promise<AffectedRowsOutput>;
    deleteOneWorkout(ctx: any, info: GraphQLResolveInfo, args: DeleteOneWorkoutArgs): Promise<Workout | null>;
    findFirstWorkout(ctx: any, info: GraphQLResolveInfo, args: FindFirstWorkoutArgs): Promise<Workout | null>;
    findFirstWorkoutOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstWorkoutOrThrowArgs): Promise<Workout | null>;
    workouts(ctx: any, info: GraphQLResolveInfo, args: FindManyWorkoutArgs): Promise<Workout[]>;
    workout(ctx: any, info: GraphQLResolveInfo, args: FindUniqueWorkoutArgs): Promise<Workout | null>;
    getWorkout(ctx: any, info: GraphQLResolveInfo, args: FindUniqueWorkoutOrThrowArgs): Promise<Workout | null>;
    groupByWorkout(ctx: any, info: GraphQLResolveInfo, args: GroupByWorkoutArgs): Promise<WorkoutGroupBy[]>;
    updateManyWorkout(ctx: any, info: GraphQLResolveInfo, args: UpdateManyWorkoutArgs): Promise<AffectedRowsOutput>;
    updateOneWorkout(ctx: any, info: GraphQLResolveInfo, args: UpdateOneWorkoutArgs): Promise<Workout | null>;
    upsertOneWorkout(ctx: any, info: GraphQLResolveInfo, args: UpsertOneWorkoutArgs): Promise<Workout>;
}
