"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindUniqueGroupResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const FindUniqueGroupArgs_1 = require("./args/FindUniqueGroupArgs");
const Group_1 = require("../../../models/Group");
const helpers_1 = require("../../../helpers");
let FindUniqueGroupResolver = class FindUniqueGroupResolver {
    async group(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.FindUniqueGroupResolver = FindUniqueGroupResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Group_1.Group, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueGroupArgs_1.FindUniqueGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FindUniqueGroupResolver.prototype, "group", null);
exports.FindUniqueGroupResolver = FindUniqueGroupResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Group_1.Group)
], FindUniqueGroupResolver);
