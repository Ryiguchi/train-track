"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExerciseCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateExerciseArgs_1 = require("./args/AggregateExerciseArgs");
const CreateManyExerciseArgs_1 = require("./args/CreateManyExerciseArgs");
const CreateOneExerciseArgs_1 = require("./args/CreateOneExerciseArgs");
const DeleteManyExerciseArgs_1 = require("./args/DeleteManyExerciseArgs");
const DeleteOneExerciseArgs_1 = require("./args/DeleteOneExerciseArgs");
const FindFirstExerciseArgs_1 = require("./args/FindFirstExerciseArgs");
const FindFirstExerciseOrThrowArgs_1 = require("./args/FindFirstExerciseOrThrowArgs");
const FindManyExerciseArgs_1 = require("./args/FindManyExerciseArgs");
const FindUniqueExerciseArgs_1 = require("./args/FindUniqueExerciseArgs");
const FindUniqueExerciseOrThrowArgs_1 = require("./args/FindUniqueExerciseOrThrowArgs");
const GroupByExerciseArgs_1 = require("./args/GroupByExerciseArgs");
const UpdateManyExerciseArgs_1 = require("./args/UpdateManyExerciseArgs");
const UpdateOneExerciseArgs_1 = require("./args/UpdateOneExerciseArgs");
const UpsertOneExerciseArgs_1 = require("./args/UpsertOneExerciseArgs");
const helpers_1 = require("../../../helpers");
const Exercise_1 = require("../../../models/Exercise");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateExercise_1 = require("../../outputs/AggregateExercise");
const ExerciseGroupBy_1 = require("../../outputs/ExerciseGroupBy");
let ExerciseCrudResolver = class ExerciseCrudResolver {
    async aggregateExercise(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManyExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstExerciseOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async exercises(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async exercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByExercise(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneExercise(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).exercise.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.ExerciseCrudResolver = ExerciseCrudResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateExercise_1.AggregateExercise, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateExerciseArgs_1.AggregateExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "aggregateExercise", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyExerciseArgs_1.CreateManyExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "createManyExercise", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Exercise_1.Exercise, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneExerciseArgs_1.CreateOneExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "createOneExercise", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyExerciseArgs_1.DeleteManyExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "deleteManyExercise", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Exercise_1.Exercise, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneExerciseArgs_1.DeleteOneExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "deleteOneExercise", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Exercise_1.Exercise, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstExerciseArgs_1.FindFirstExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "findFirstExercise", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Exercise_1.Exercise, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstExerciseOrThrowArgs_1.FindFirstExerciseOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "findFirstExerciseOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [Exercise_1.Exercise], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyExerciseArgs_1.FindManyExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "exercises", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Exercise_1.Exercise, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueExerciseArgs_1.FindUniqueExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "exercise", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Exercise_1.Exercise, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueExerciseOrThrowArgs_1.FindUniqueExerciseOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "getExercise", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [ExerciseGroupBy_1.ExerciseGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByExerciseArgs_1.GroupByExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "groupByExercise", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyExerciseArgs_1.UpdateManyExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "updateManyExercise", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Exercise_1.Exercise, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneExerciseArgs_1.UpdateOneExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "updateOneExercise", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Exercise_1.Exercise, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneExerciseArgs_1.UpsertOneExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ExerciseCrudResolver.prototype, "upsertOneExercise", null);
exports.ExerciseCrudResolver = ExerciseCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Exercise_1.Exercise)
], ExerciseCrudResolver);
