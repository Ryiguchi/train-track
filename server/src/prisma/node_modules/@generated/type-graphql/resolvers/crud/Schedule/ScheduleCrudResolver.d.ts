import type { GraphQLResolveInfo } from "graphql";
import { AggregateScheduleArgs } from "./args/AggregateScheduleArgs";
import { CreateManyScheduleArgs } from "./args/CreateManyScheduleArgs";
import { CreateOneScheduleArgs } from "./args/CreateOneScheduleArgs";
import { DeleteManyScheduleArgs } from "./args/DeleteManyScheduleArgs";
import { DeleteOneScheduleArgs } from "./args/DeleteOneScheduleArgs";
import { FindFirstScheduleArgs } from "./args/FindFirstScheduleArgs";
import { FindFirstScheduleOrThrowArgs } from "./args/FindFirstScheduleOrThrowArgs";
import { FindManyScheduleArgs } from "./args/FindManyScheduleArgs";
import { FindUniqueScheduleArgs } from "./args/FindUniqueScheduleArgs";
import { FindUniqueScheduleOrThrowArgs } from "./args/FindUniqueScheduleOrThrowArgs";
import { GroupByScheduleArgs } from "./args/GroupByScheduleArgs";
import { UpdateManyScheduleArgs } from "./args/UpdateManyScheduleArgs";
import { UpdateOneScheduleArgs } from "./args/UpdateOneScheduleArgs";
import { UpsertOneScheduleArgs } from "./args/UpsertOneScheduleArgs";
import { Schedule } from "../../../models/Schedule";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateSchedule } from "../../outputs/AggregateSchedule";
import { ScheduleGroupBy } from "../../outputs/ScheduleGroupBy";
export declare class ScheduleCrudResolver {
    aggregateSchedule(ctx: any, info: GraphQLResolveInfo, args: AggregateScheduleArgs): Promise<AggregateSchedule>;
    createManySchedule(ctx: any, info: GraphQLResolveInfo, args: CreateManyScheduleArgs): Promise<AffectedRowsOutput>;
    createOneSchedule(ctx: any, info: GraphQLResolveInfo, args: CreateOneScheduleArgs): Promise<Schedule>;
    deleteManySchedule(ctx: any, info: GraphQLResolveInfo, args: DeleteManyScheduleArgs): Promise<AffectedRowsOutput>;
    deleteOneSchedule(ctx: any, info: GraphQLResolveInfo, args: DeleteOneScheduleArgs): Promise<Schedule | null>;
    findFirstSchedule(ctx: any, info: GraphQLResolveInfo, args: FindFirstScheduleArgs): Promise<Schedule | null>;
    findFirstScheduleOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstScheduleOrThrowArgs): Promise<Schedule | null>;
    schedules(ctx: any, info: GraphQLResolveInfo, args: FindManyScheduleArgs): Promise<Schedule[]>;
    schedule(ctx: any, info: GraphQLResolveInfo, args: FindUniqueScheduleArgs): Promise<Schedule | null>;
    getSchedule(ctx: any, info: GraphQLResolveInfo, args: FindUniqueScheduleOrThrowArgs): Promise<Schedule | null>;
    groupBySchedule(ctx: any, info: GraphQLResolveInfo, args: GroupByScheduleArgs): Promise<ScheduleGroupBy[]>;
    updateManySchedule(ctx: any, info: GraphQLResolveInfo, args: UpdateManyScheduleArgs): Promise<AffectedRowsOutput>;
    updateOneSchedule(ctx: any, info: GraphQLResolveInfo, args: UpdateOneScheduleArgs): Promise<Schedule | null>;
    upsertOneSchedule(ctx: any, info: GraphQLResolveInfo, args: UpsertOneScheduleArgs): Promise<Schedule>;
}
