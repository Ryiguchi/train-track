"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindManyGroupArgs = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const GroupOrderByWithRelationInput_1 = require("../../../inputs/GroupOrderByWithRelationInput");
const GroupWhereInput_1 = require("../../../inputs/GroupWhereInput");
const GroupWhereUniqueInput_1 = require("../../../inputs/GroupWhereUniqueInput");
const GroupScalarFieldEnum_1 = require("../../../../enums/GroupScalarFieldEnum");
let FindManyGroupArgs = class FindManyGroupArgs {
    where;
    orderBy;
    cursor;
    take;
    skip;
    distinct;
};
exports.FindManyGroupArgs = FindManyGroupArgs;
tslib_1.__decorate([
    TypeGraphQL.Field(_type => GroupWhereInput_1.GroupWhereInput, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", GroupWhereInput_1.GroupWhereInput)
], FindManyGroupArgs.prototype, "where", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => [GroupOrderByWithRelationInput_1.GroupOrderByWithRelationInput], {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Array)
], FindManyGroupArgs.prototype, "orderBy", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => GroupWhereUniqueInput_1.GroupWhereUniqueInput, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", GroupWhereUniqueInput_1.GroupWhereUniqueInput)
], FindManyGroupArgs.prototype, "cursor", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Number)
], FindManyGroupArgs.prototype, "take", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => TypeGraphQL.Int, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Number)
], FindManyGroupArgs.prototype, "skip", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => [GroupScalarFieldEnum_1.GroupScalarFieldEnum], {
        nullable: true
    }),
    tslib_1.__metadata("design:type", Array)
], FindManyGroupArgs.prototype, "distinct", void 0);
exports.FindManyGroupArgs = FindManyGroupArgs = tslib_1.__decorate([
    TypeGraphQL.ArgsType()
], FindManyGroupArgs);
