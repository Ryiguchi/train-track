"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkoutCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateWorkoutArgs_1 = require("./args/AggregateWorkoutArgs");
const CreateManyWorkoutArgs_1 = require("./args/CreateManyWorkoutArgs");
const CreateOneWorkoutArgs_1 = require("./args/CreateOneWorkoutArgs");
const DeleteManyWorkoutArgs_1 = require("./args/DeleteManyWorkoutArgs");
const DeleteOneWorkoutArgs_1 = require("./args/DeleteOneWorkoutArgs");
const FindFirstWorkoutArgs_1 = require("./args/FindFirstWorkoutArgs");
const FindFirstWorkoutOrThrowArgs_1 = require("./args/FindFirstWorkoutOrThrowArgs");
const FindManyWorkoutArgs_1 = require("./args/FindManyWorkoutArgs");
const FindUniqueWorkoutArgs_1 = require("./args/FindUniqueWorkoutArgs");
const FindUniqueWorkoutOrThrowArgs_1 = require("./args/FindUniqueWorkoutOrThrowArgs");
const GroupByWorkoutArgs_1 = require("./args/GroupByWorkoutArgs");
const UpdateManyWorkoutArgs_1 = require("./args/UpdateManyWorkoutArgs");
const UpdateOneWorkoutArgs_1 = require("./args/UpdateOneWorkoutArgs");
const UpsertOneWorkoutArgs_1 = require("./args/UpsertOneWorkoutArgs");
const helpers_1 = require("../../../helpers");
const Workout_1 = require("../../../models/Workout");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateWorkout_1 = require("../../outputs/AggregateWorkout");
const WorkoutGroupBy_1 = require("../../outputs/WorkoutGroupBy");
let WorkoutCrudResolver = class WorkoutCrudResolver {
    async aggregateWorkout(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManyWorkout(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneWorkout(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyWorkout(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneWorkout(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstWorkout(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstWorkoutOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async workouts(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async workout(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getWorkout(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByWorkout(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyWorkout(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneWorkout(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneWorkout(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).workout.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.WorkoutCrudResolver = WorkoutCrudResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateWorkout_1.AggregateWorkout, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateWorkoutArgs_1.AggregateWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "aggregateWorkout", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyWorkoutArgs_1.CreateManyWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "createManyWorkout", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Workout_1.Workout, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneWorkoutArgs_1.CreateOneWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "createOneWorkout", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyWorkoutArgs_1.DeleteManyWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "deleteManyWorkout", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Workout_1.Workout, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneWorkoutArgs_1.DeleteOneWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "deleteOneWorkout", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Workout_1.Workout, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstWorkoutArgs_1.FindFirstWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "findFirstWorkout", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Workout_1.Workout, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstWorkoutOrThrowArgs_1.FindFirstWorkoutOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "findFirstWorkoutOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [Workout_1.Workout], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyWorkoutArgs_1.FindManyWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "workouts", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Workout_1.Workout, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueWorkoutArgs_1.FindUniqueWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "workout", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Workout_1.Workout, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueWorkoutOrThrowArgs_1.FindUniqueWorkoutOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "getWorkout", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [WorkoutGroupBy_1.WorkoutGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByWorkoutArgs_1.GroupByWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "groupByWorkout", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyWorkoutArgs_1.UpdateManyWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "updateManyWorkout", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Workout_1.Workout, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneWorkoutArgs_1.UpdateOneWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "updateOneWorkout", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Workout_1.Workout, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneWorkoutArgs_1.UpsertOneWorkoutArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], WorkoutCrudResolver.prototype, "upsertOneWorkout", null);
exports.WorkoutCrudResolver = WorkoutCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Workout_1.Workout)
], WorkoutCrudResolver);
