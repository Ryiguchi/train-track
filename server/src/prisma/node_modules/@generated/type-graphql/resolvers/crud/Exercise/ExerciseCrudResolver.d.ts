import type { GraphQLResolveInfo } from "graphql";
import { AggregateExerciseArgs } from "./args/AggregateExerciseArgs";
import { CreateManyExerciseArgs } from "./args/CreateManyExerciseArgs";
import { CreateOneExerciseArgs } from "./args/CreateOneExerciseArgs";
import { DeleteManyExerciseArgs } from "./args/DeleteManyExerciseArgs";
import { DeleteOneExerciseArgs } from "./args/DeleteOneExerciseArgs";
import { FindFirstExerciseArgs } from "./args/FindFirstExerciseArgs";
import { FindFirstExerciseOrThrowArgs } from "./args/FindFirstExerciseOrThrowArgs";
import { FindManyExerciseArgs } from "./args/FindManyExerciseArgs";
import { FindUniqueExerciseArgs } from "./args/FindUniqueExerciseArgs";
import { FindUniqueExerciseOrThrowArgs } from "./args/FindUniqueExerciseOrThrowArgs";
import { GroupByExerciseArgs } from "./args/GroupByExerciseArgs";
import { UpdateManyExerciseArgs } from "./args/UpdateManyExerciseArgs";
import { UpdateOneExerciseArgs } from "./args/UpdateOneExerciseArgs";
import { UpsertOneExerciseArgs } from "./args/UpsertOneExerciseArgs";
import { Exercise } from "../../../models/Exercise";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateExercise } from "../../outputs/AggregateExercise";
import { ExerciseGroupBy } from "../../outputs/ExerciseGroupBy";
export declare class ExerciseCrudResolver {
    aggregateExercise(ctx: any, info: GraphQLResolveInfo, args: AggregateExerciseArgs): Promise<AggregateExercise>;
    createManyExercise(ctx: any, info: GraphQLResolveInfo, args: CreateManyExerciseArgs): Promise<AffectedRowsOutput>;
    createOneExercise(ctx: any, info: GraphQLResolveInfo, args: CreateOneExerciseArgs): Promise<Exercise>;
    deleteManyExercise(ctx: any, info: GraphQLResolveInfo, args: DeleteManyExerciseArgs): Promise<AffectedRowsOutput>;
    deleteOneExercise(ctx: any, info: GraphQLResolveInfo, args: DeleteOneExerciseArgs): Promise<Exercise | null>;
    findFirstExercise(ctx: any, info: GraphQLResolveInfo, args: FindFirstExerciseArgs): Promise<Exercise | null>;
    findFirstExerciseOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstExerciseOrThrowArgs): Promise<Exercise | null>;
    exercises(ctx: any, info: GraphQLResolveInfo, args: FindManyExerciseArgs): Promise<Exercise[]>;
    exercise(ctx: any, info: GraphQLResolveInfo, args: FindUniqueExerciseArgs): Promise<Exercise | null>;
    getExercise(ctx: any, info: GraphQLResolveInfo, args: FindUniqueExerciseOrThrowArgs): Promise<Exercise | null>;
    groupByExercise(ctx: any, info: GraphQLResolveInfo, args: GroupByExerciseArgs): Promise<ExerciseGroupBy[]>;
    updateManyExercise(ctx: any, info: GraphQLResolveInfo, args: UpdateManyExerciseArgs): Promise<AffectedRowsOutput>;
    updateOneExercise(ctx: any, info: GraphQLResolveInfo, args: UpdateOneExerciseArgs): Promise<Exercise | null>;
    upsertOneExercise(ctx: any, info: GraphQLResolveInfo, args: UpsertOneExerciseArgs): Promise<Exercise>;
}
