"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateGroupArgs_1 = require("./args/AggregateGroupArgs");
const CreateManyGroupArgs_1 = require("./args/CreateManyGroupArgs");
const CreateOneGroupArgs_1 = require("./args/CreateOneGroupArgs");
const DeleteManyGroupArgs_1 = require("./args/DeleteManyGroupArgs");
const DeleteOneGroupArgs_1 = require("./args/DeleteOneGroupArgs");
const FindFirstGroupArgs_1 = require("./args/FindFirstGroupArgs");
const FindFirstGroupOrThrowArgs_1 = require("./args/FindFirstGroupOrThrowArgs");
const FindManyGroupArgs_1 = require("./args/FindManyGroupArgs");
const FindUniqueGroupArgs_1 = require("./args/FindUniqueGroupArgs");
const FindUniqueGroupOrThrowArgs_1 = require("./args/FindUniqueGroupOrThrowArgs");
const GroupByGroupArgs_1 = require("./args/GroupByGroupArgs");
const UpdateManyGroupArgs_1 = require("./args/UpdateManyGroupArgs");
const UpdateOneGroupArgs_1 = require("./args/UpdateOneGroupArgs");
const UpsertOneGroupArgs_1 = require("./args/UpsertOneGroupArgs");
const helpers_1 = require("../../../helpers");
const Group_1 = require("../../../models/Group");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateGroup_1 = require("../../outputs/AggregateGroup");
const GroupGroupBy_1 = require("../../outputs/GroupGroupBy");
let GroupCrudResolver = class GroupCrudResolver {
    async aggregateGroup(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).group.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManyGroup(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneGroup(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyGroup(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneGroup(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstGroup(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstGroupOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groups(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async group(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getGroup(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByGroup(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyGroup(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneGroup(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneGroup(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.GroupCrudResolver = GroupCrudResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateGroup_1.AggregateGroup, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateGroupArgs_1.AggregateGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "aggregateGroup", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyGroupArgs_1.CreateManyGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "createManyGroup", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Group_1.Group, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneGroupArgs_1.CreateOneGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "createOneGroup", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyGroupArgs_1.DeleteManyGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "deleteManyGroup", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Group_1.Group, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneGroupArgs_1.DeleteOneGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "deleteOneGroup", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Group_1.Group, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstGroupArgs_1.FindFirstGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "findFirstGroup", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Group_1.Group, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstGroupOrThrowArgs_1.FindFirstGroupOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "findFirstGroupOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [Group_1.Group], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyGroupArgs_1.FindManyGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "groups", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Group_1.Group, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueGroupArgs_1.FindUniqueGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "group", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Group_1.Group, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueGroupOrThrowArgs_1.FindUniqueGroupOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "getGroup", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [GroupGroupBy_1.GroupGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByGroupArgs_1.GroupByGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "groupByGroup", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyGroupArgs_1.UpdateManyGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "updateManyGroup", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Group_1.Group, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneGroupArgs_1.UpdateOneGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "updateOneGroup", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Group_1.Group, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneGroupArgs_1.UpsertOneGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupCrudResolver.prototype, "upsertOneGroup", null);
exports.GroupCrudResolver = GroupCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Group_1.Group)
], GroupCrudResolver);
