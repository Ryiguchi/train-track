import type { GraphQLResolveInfo } from "graphql";
import { AggregateGroupArgs } from "./args/AggregateGroupArgs";
import { CreateManyGroupArgs } from "./args/CreateManyGroupArgs";
import { CreateOneGroupArgs } from "./args/CreateOneGroupArgs";
import { DeleteManyGroupArgs } from "./args/DeleteManyGroupArgs";
import { DeleteOneGroupArgs } from "./args/DeleteOneGroupArgs";
import { FindFirstGroupArgs } from "./args/FindFirstGroupArgs";
import { FindFirstGroupOrThrowArgs } from "./args/FindFirstGroupOrThrowArgs";
import { FindManyGroupArgs } from "./args/FindManyGroupArgs";
import { FindUniqueGroupArgs } from "./args/FindUniqueGroupArgs";
import { FindUniqueGroupOrThrowArgs } from "./args/FindUniqueGroupOrThrowArgs";
import { GroupByGroupArgs } from "./args/GroupByGroupArgs";
import { UpdateManyGroupArgs } from "./args/UpdateManyGroupArgs";
import { UpdateOneGroupArgs } from "./args/UpdateOneGroupArgs";
import { UpsertOneGroupArgs } from "./args/UpsertOneGroupArgs";
import { Group } from "../../../models/Group";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateGroup } from "../../outputs/AggregateGroup";
import { GroupGroupBy } from "../../outputs/GroupGroupBy";
export declare class GroupCrudResolver {
    aggregateGroup(ctx: any, info: GraphQLResolveInfo, args: AggregateGroupArgs): Promise<AggregateGroup>;
    createManyGroup(ctx: any, info: GraphQLResolveInfo, args: CreateManyGroupArgs): Promise<AffectedRowsOutput>;
    createOneGroup(ctx: any, info: GraphQLResolveInfo, args: CreateOneGroupArgs): Promise<Group>;
    deleteManyGroup(ctx: any, info: GraphQLResolveInfo, args: DeleteManyGroupArgs): Promise<AffectedRowsOutput>;
    deleteOneGroup(ctx: any, info: GraphQLResolveInfo, args: DeleteOneGroupArgs): Promise<Group | null>;
    findFirstGroup(ctx: any, info: GraphQLResolveInfo, args: FindFirstGroupArgs): Promise<Group | null>;
    findFirstGroupOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstGroupOrThrowArgs): Promise<Group | null>;
    groups(ctx: any, info: GraphQLResolveInfo, args: FindManyGroupArgs): Promise<Group[]>;
    group(ctx: any, info: GraphQLResolveInfo, args: FindUniqueGroupArgs): Promise<Group | null>;
    getGroup(ctx: any, info: GraphQLResolveInfo, args: FindUniqueGroupOrThrowArgs): Promise<Group | null>;
    groupByGroup(ctx: any, info: GraphQLResolveInfo, args: GroupByGroupArgs): Promise<GroupGroupBy[]>;
    updateManyGroup(ctx: any, info: GraphQLResolveInfo, args: UpdateManyGroupArgs): Promise<AffectedRowsOutput>;
    updateOneGroup(ctx: any, info: GraphQLResolveInfo, args: UpdateOneGroupArgs): Promise<Group | null>;
    upsertOneGroup(ctx: any, info: GraphQLResolveInfo, args: UpsertOneGroupArgs): Promise<Group>;
}
