"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateScheduleArgs_1 = require("./args/AggregateScheduleArgs");
const CreateManyScheduleArgs_1 = require("./args/CreateManyScheduleArgs");
const CreateOneScheduleArgs_1 = require("./args/CreateOneScheduleArgs");
const DeleteManyScheduleArgs_1 = require("./args/DeleteManyScheduleArgs");
const DeleteOneScheduleArgs_1 = require("./args/DeleteOneScheduleArgs");
const FindFirstScheduleArgs_1 = require("./args/FindFirstScheduleArgs");
const FindFirstScheduleOrThrowArgs_1 = require("./args/FindFirstScheduleOrThrowArgs");
const FindManyScheduleArgs_1 = require("./args/FindManyScheduleArgs");
const FindUniqueScheduleArgs_1 = require("./args/FindUniqueScheduleArgs");
const FindUniqueScheduleOrThrowArgs_1 = require("./args/FindUniqueScheduleOrThrowArgs");
const GroupByScheduleArgs_1 = require("./args/GroupByScheduleArgs");
const UpdateManyScheduleArgs_1 = require("./args/UpdateManyScheduleArgs");
const UpdateOneScheduleArgs_1 = require("./args/UpdateOneScheduleArgs");
const UpsertOneScheduleArgs_1 = require("./args/UpsertOneScheduleArgs");
const helpers_1 = require("../../../helpers");
const Schedule_1 = require("../../../models/Schedule");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateSchedule_1 = require("../../outputs/AggregateSchedule");
const ScheduleGroupBy_1 = require("../../outputs/ScheduleGroupBy");
let ScheduleCrudResolver = class ScheduleCrudResolver {
    async aggregateSchedule(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManySchedule(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneSchedule(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManySchedule(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneSchedule(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstSchedule(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstScheduleOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async schedules(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async schedule(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getSchedule(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupBySchedule(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManySchedule(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneSchedule(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneSchedule(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).schedule.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.ScheduleCrudResolver = ScheduleCrudResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateSchedule_1.AggregateSchedule, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateScheduleArgs_1.AggregateScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "aggregateSchedule", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyScheduleArgs_1.CreateManyScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "createManySchedule", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Schedule_1.Schedule, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneScheduleArgs_1.CreateOneScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "createOneSchedule", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyScheduleArgs_1.DeleteManyScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "deleteManySchedule", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Schedule_1.Schedule, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneScheduleArgs_1.DeleteOneScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "deleteOneSchedule", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Schedule_1.Schedule, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstScheduleArgs_1.FindFirstScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "findFirstSchedule", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Schedule_1.Schedule, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstScheduleOrThrowArgs_1.FindFirstScheduleOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "findFirstScheduleOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [Schedule_1.Schedule], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyScheduleArgs_1.FindManyScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "schedules", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Schedule_1.Schedule, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueScheduleArgs_1.FindUniqueScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "schedule", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Schedule_1.Schedule, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueScheduleOrThrowArgs_1.FindUniqueScheduleOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "getSchedule", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [ScheduleGroupBy_1.ScheduleGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByScheduleArgs_1.GroupByScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "groupBySchedule", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyScheduleArgs_1.UpdateManyScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "updateManySchedule", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Schedule_1.Schedule, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneScheduleArgs_1.UpdateOneScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "updateOneSchedule", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Schedule_1.Schedule, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneScheduleArgs_1.UpsertOneScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], ScheduleCrudResolver.prototype, "upsertOneSchedule", null);
exports.ScheduleCrudResolver = ScheduleCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Schedule_1.Schedule)
], ScheduleCrudResolver);
