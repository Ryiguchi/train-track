"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateGroupResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateGroupArgs_1 = require("./args/AggregateGroupArgs");
const Group_1 = require("../../../models/Group");
const AggregateGroup_1 = require("../../outputs/AggregateGroup");
const helpers_1 = require("../../../helpers");
let AggregateGroupResolver = class AggregateGroupResolver {
    async aggregateGroup(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).group.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
};
exports.AggregateGroupResolver = AggregateGroupResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateGroup_1.AggregateGroup, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateGroupArgs_1.AggregateGroupArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], AggregateGroupResolver.prototype, "aggregateGroup", null);
exports.AggregateGroupResolver = AggregateGroupResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Group_1.Group)
], AggregateGroupResolver);
