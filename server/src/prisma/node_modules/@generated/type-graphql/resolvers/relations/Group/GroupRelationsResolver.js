"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupRelationsResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const Exercise_1 = require("../../../models/Exercise");
const Group_1 = require("../../../models/Group");
const Schedule_1 = require("../../../models/Schedule");
const GroupExerciseArgs_1 = require("./args/GroupExerciseArgs");
const GroupScheduleArgs_1 = require("./args/GroupScheduleArgs");
const helpers_1 = require("../../../helpers");
let GroupRelationsResolver = class GroupRelationsResolver {
    async Exercise(group, ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.findUniqueOrThrow({
            where: {
                id: group.id,
            },
        }).Exercise({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async Schedule(group, ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).group.findUniqueOrThrow({
            where: {
                id: group.id,
            },
        }).Schedule({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.GroupRelationsResolver = GroupRelationsResolver;
tslib_1.__decorate([
    TypeGraphQL.FieldResolver(_type => [Exercise_1.Exercise], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Root()),
    tslib_1.__param(1, TypeGraphQL.Ctx()),
    tslib_1.__param(2, TypeGraphQL.Info()),
    tslib_1.__param(3, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Group_1.Group, Object, Object, GroupExerciseArgs_1.GroupExerciseArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupRelationsResolver.prototype, "Exercise", null);
tslib_1.__decorate([
    TypeGraphQL.FieldResolver(_type => [Schedule_1.Schedule], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Root()),
    tslib_1.__param(1, TypeGraphQL.Ctx()),
    tslib_1.__param(2, TypeGraphQL.Info()),
    tslib_1.__param(3, TypeGraphQL.Args()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Group_1.Group, Object, Object, GroupScheduleArgs_1.GroupScheduleArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], GroupRelationsResolver.prototype, "Schedule", null);
exports.GroupRelationsResolver = GroupRelationsResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Group_1.Group)
], GroupRelationsResolver);
