"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    User: crudResolvers.UserCrudResolver,
    Exercise: crudResolvers.ExerciseCrudResolver,
    Group: crudResolvers.GroupCrudResolver,
    Schedule: crudResolvers.ScheduleCrudResolver,
    Workout: crudResolvers.WorkoutCrudResolver
};
const actionResolversMap = {
    User: {
        aggregateUser: actionResolvers.AggregateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        createOneUser: actionResolvers.CreateOneUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        deleteOneUser: actionResolvers.DeleteOneUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        findFirstUserOrThrow: actionResolvers.FindFirstUserOrThrowResolver,
        users: actionResolvers.FindManyUserResolver,
        user: actionResolvers.FindUniqueUserResolver,
        getUser: actionResolvers.FindUniqueUserOrThrowResolver,
        groupByUser: actionResolvers.GroupByUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        updateOneUser: actionResolvers.UpdateOneUserResolver,
        upsertOneUser: actionResolvers.UpsertOneUserResolver
    },
    Exercise: {
        aggregateExercise: actionResolvers.AggregateExerciseResolver,
        createManyExercise: actionResolvers.CreateManyExerciseResolver,
        createOneExercise: actionResolvers.CreateOneExerciseResolver,
        deleteManyExercise: actionResolvers.DeleteManyExerciseResolver,
        deleteOneExercise: actionResolvers.DeleteOneExerciseResolver,
        findFirstExercise: actionResolvers.FindFirstExerciseResolver,
        findFirstExerciseOrThrow: actionResolvers.FindFirstExerciseOrThrowResolver,
        exercises: actionResolvers.FindManyExerciseResolver,
        exercise: actionResolvers.FindUniqueExerciseResolver,
        getExercise: actionResolvers.FindUniqueExerciseOrThrowResolver,
        groupByExercise: actionResolvers.GroupByExerciseResolver,
        updateManyExercise: actionResolvers.UpdateManyExerciseResolver,
        updateOneExercise: actionResolvers.UpdateOneExerciseResolver,
        upsertOneExercise: actionResolvers.UpsertOneExerciseResolver
    },
    Group: {
        aggregateGroup: actionResolvers.AggregateGroupResolver,
        createManyGroup: actionResolvers.CreateManyGroupResolver,
        createOneGroup: actionResolvers.CreateOneGroupResolver,
        deleteManyGroup: actionResolvers.DeleteManyGroupResolver,
        deleteOneGroup: actionResolvers.DeleteOneGroupResolver,
        findFirstGroup: actionResolvers.FindFirstGroupResolver,
        findFirstGroupOrThrow: actionResolvers.FindFirstGroupOrThrowResolver,
        groups: actionResolvers.FindManyGroupResolver,
        group: actionResolvers.FindUniqueGroupResolver,
        getGroup: actionResolvers.FindUniqueGroupOrThrowResolver,
        groupByGroup: actionResolvers.GroupByGroupResolver,
        updateManyGroup: actionResolvers.UpdateManyGroupResolver,
        updateOneGroup: actionResolvers.UpdateOneGroupResolver,
        upsertOneGroup: actionResolvers.UpsertOneGroupResolver
    },
    Schedule: {
        aggregateSchedule: actionResolvers.AggregateScheduleResolver,
        createManySchedule: actionResolvers.CreateManyScheduleResolver,
        createOneSchedule: actionResolvers.CreateOneScheduleResolver,
        deleteManySchedule: actionResolvers.DeleteManyScheduleResolver,
        deleteOneSchedule: actionResolvers.DeleteOneScheduleResolver,
        findFirstSchedule: actionResolvers.FindFirstScheduleResolver,
        findFirstScheduleOrThrow: actionResolvers.FindFirstScheduleOrThrowResolver,
        schedules: actionResolvers.FindManyScheduleResolver,
        schedule: actionResolvers.FindUniqueScheduleResolver,
        getSchedule: actionResolvers.FindUniqueScheduleOrThrowResolver,
        groupBySchedule: actionResolvers.GroupByScheduleResolver,
        updateManySchedule: actionResolvers.UpdateManyScheduleResolver,
        updateOneSchedule: actionResolvers.UpdateOneScheduleResolver,
        upsertOneSchedule: actionResolvers.UpsertOneScheduleResolver
    },
    Workout: {
        aggregateWorkout: actionResolvers.AggregateWorkoutResolver,
        createManyWorkout: actionResolvers.CreateManyWorkoutResolver,
        createOneWorkout: actionResolvers.CreateOneWorkoutResolver,
        deleteManyWorkout: actionResolvers.DeleteManyWorkoutResolver,
        deleteOneWorkout: actionResolvers.DeleteOneWorkoutResolver,
        findFirstWorkout: actionResolvers.FindFirstWorkoutResolver,
        findFirstWorkoutOrThrow: actionResolvers.FindFirstWorkoutOrThrowResolver,
        workouts: actionResolvers.FindManyWorkoutResolver,
        workout: actionResolvers.FindUniqueWorkoutResolver,
        getWorkout: actionResolvers.FindUniqueWorkoutOrThrowResolver,
        groupByWorkout: actionResolvers.GroupByWorkoutResolver,
        updateManyWorkout: actionResolvers.UpdateManyWorkoutResolver,
        updateOneWorkout: actionResolvers.UpdateOneWorkoutResolver,
        upsertOneWorkout: actionResolvers.UpsertOneWorkoutResolver
    }
};
const crudResolversInfo = {
    User: ["aggregateUser", "createManyUser", "createOneUser", "deleteManyUser", "deleteOneUser", "findFirstUser", "findFirstUserOrThrow", "users", "user", "getUser", "groupByUser", "updateManyUser", "updateOneUser", "upsertOneUser"],
    Exercise: ["aggregateExercise", "createManyExercise", "createOneExercise", "deleteManyExercise", "deleteOneExercise", "findFirstExercise", "findFirstExerciseOrThrow", "exercises", "exercise", "getExercise", "groupByExercise", "updateManyExercise", "updateOneExercise", "upsertOneExercise"],
    Group: ["aggregateGroup", "createManyGroup", "createOneGroup", "deleteManyGroup", "deleteOneGroup", "findFirstGroup", "findFirstGroupOrThrow", "groups", "group", "getGroup", "groupByGroup", "updateManyGroup", "updateOneGroup", "upsertOneGroup"],
    Schedule: ["aggregateSchedule", "createManySchedule", "createOneSchedule", "deleteManySchedule", "deleteOneSchedule", "findFirstSchedule", "findFirstScheduleOrThrow", "schedules", "schedule", "getSchedule", "groupBySchedule", "updateManySchedule", "updateOneSchedule", "upsertOneSchedule"],
    Workout: ["aggregateWorkout", "createManyWorkout", "createOneWorkout", "deleteManyWorkout", "deleteOneWorkout", "findFirstWorkout", "findFirstWorkoutOrThrow", "workouts", "workout", "getWorkout", "groupByWorkout", "updateManyWorkout", "updateOneWorkout", "upsertOneWorkout"]
};
const argsInfo = {
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyUserArgs: ["data", "skipDuplicates"],
    CreateOneUserArgs: ["data"],
    DeleteManyUserArgs: ["where"],
    DeleteOneUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstUserOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueUserArgs: ["where"],
    FindUniqueUserOrThrowArgs: ["where"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyUserArgs: ["data", "where"],
    UpdateOneUserArgs: ["data", "where"],
    UpsertOneUserArgs: ["where", "create", "update"],
    AggregateExerciseArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyExerciseArgs: ["data", "skipDuplicates"],
    CreateOneExerciseArgs: ["data"],
    DeleteManyExerciseArgs: ["where"],
    DeleteOneExerciseArgs: ["where"],
    FindFirstExerciseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstExerciseOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyExerciseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueExerciseArgs: ["where"],
    FindUniqueExerciseOrThrowArgs: ["where"],
    GroupByExerciseArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyExerciseArgs: ["data", "where"],
    UpdateOneExerciseArgs: ["data", "where"],
    UpsertOneExerciseArgs: ["where", "create", "update"],
    AggregateGroupArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyGroupArgs: ["data", "skipDuplicates"],
    CreateOneGroupArgs: ["data"],
    DeleteManyGroupArgs: ["where"],
    DeleteOneGroupArgs: ["where"],
    FindFirstGroupArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstGroupOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyGroupArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueGroupArgs: ["where"],
    FindUniqueGroupOrThrowArgs: ["where"],
    GroupByGroupArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyGroupArgs: ["data", "where"],
    UpdateOneGroupArgs: ["data", "where"],
    UpsertOneGroupArgs: ["where", "create", "update"],
    AggregateScheduleArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyScheduleArgs: ["data", "skipDuplicates"],
    CreateOneScheduleArgs: ["data"],
    DeleteManyScheduleArgs: ["where"],
    DeleteOneScheduleArgs: ["where"],
    FindFirstScheduleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstScheduleOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyScheduleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueScheduleArgs: ["where"],
    FindUniqueScheduleOrThrowArgs: ["where"],
    GroupByScheduleArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyScheduleArgs: ["data", "where"],
    UpdateOneScheduleArgs: ["data", "where"],
    UpsertOneScheduleArgs: ["where", "create", "update"],
    AggregateWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyWorkoutArgs: ["data", "skipDuplicates"],
    CreateOneWorkoutArgs: ["data"],
    DeleteManyWorkoutArgs: ["where"],
    DeleteOneWorkoutArgs: ["where"],
    FindFirstWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstWorkoutOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyWorkoutArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueWorkoutArgs: ["where"],
    FindUniqueWorkoutOrThrowArgs: ["where"],
    GroupByWorkoutArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyWorkoutArgs: ["data", "where"],
    UpdateOneWorkoutArgs: ["data", "where"],
    UpsertOneWorkoutArgs: ["where", "create", "update"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    const mutationOperationPrefixes = [
        "createOne", "createMany", "deleteOne", "updateOne", "deleteMany", "updateMany", "upsertOne"
    ];
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        const allActionsDecorators = resolverActionsConfig._all;
        const resolverActionNames = crudResolversInfo[modelName];
        for (const resolverActionName of resolverActionNames) {
            const maybeDecoratorsOrFn = resolverActionsConfig[resolverActionName];
            const isWriteOperation = mutationOperationPrefixes.some(prefix => resolverActionName.startsWith(prefix));
            const operationKindDecorators = isWriteOperation ? resolverActionsConfig._mutation : resolverActionsConfig._query;
            const mainDecorators = [
                ...allActionsDecorators ?? [],
                ...operationKindDecorators ?? [],
            ];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(mainDecorators);
            }
            else {
                decorators = [...mainDecorators, ...maybeDecoratorsOrFn ?? []];
            }
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    Exercise: relationResolvers.ExerciseRelationsResolver,
    Group: relationResolvers.GroupRelationsResolver,
    Schedule: relationResolvers.ScheduleRelationsResolver,
    Workout: relationResolvers.WorkoutRelationsResolver
};
const relationResolversInfo = {
    Exercise: ["group", "Workout"],
    Group: ["Exercise", "Schedule"],
    Schedule: ["group"],
    Workout: ["exercise"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        const allActionsDecorators = relationResolverActionsConfig._all ?? [];
        const relationResolverActionNames = relationResolversInfo[modelName];
        for (const relationResolverActionName of relationResolverActionNames) {
            const maybeDecoratorsOrFn = relationResolverActionsConfig[relationResolverActionName];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(allActionsDecorators);
            }
            else {
                decorators = [...allActionsDecorators, ...maybeDecoratorsOrFn ?? []];
            }
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        const allFieldsDecorators = enhanceConfig.fields._all ?? [];
        for (const typeFieldName of typeFieldNames) {
            const maybeDecoratorsOrFn = enhanceConfig.fields[typeFieldName];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(allFieldsDecorators);
            }
            else {
                decorators = [...allFieldsDecorators, ...maybeDecoratorsOrFn ?? []];
            }
            tslib.__decorate(decorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    User: ["id", "createdAt", "updatedAt", "name", "email", "password", "exercises"],
    Exercise: ["id", "name", "slug", "groupId"],
    Group: ["id", "name"],
    Schedule: ["id", "date", "groupId"],
    Workout: ["id", "date", "sets", "exerciseId"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUser: ["_count", "_avg", "_sum", "_min", "_max"],
    UserGroupBy: ["id", "createdAt", "updatedAt", "name", "email", "password", "exercises", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateExercise: ["_count", "_avg", "_sum", "_min", "_max"],
    ExerciseGroupBy: ["id", "name", "slug", "groupId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateGroup: ["_count", "_avg", "_sum", "_min", "_max"],
    GroupGroupBy: ["id", "name", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSchedule: ["_count", "_avg", "_sum", "_min", "_max"],
    ScheduleGroupBy: ["id", "date", "groupId", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateWorkout: ["_count", "_avg", "_sum", "_min", "_max"],
    WorkoutGroupBy: ["id", "date", "sets", "exerciseId", "_count", "_avg", "_sum", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UserCountAggregate: ["id", "createdAt", "updatedAt", "name", "email", "password", "exercises", "_all"],
    UserAvgAggregate: ["id"],
    UserSumAggregate: ["id"],
    UserMinAggregate: ["id", "createdAt", "updatedAt", "name", "email", "password"],
    UserMaxAggregate: ["id", "createdAt", "updatedAt", "name", "email", "password"],
    ExerciseCount: ["Workout"],
    ExerciseCountAggregate: ["id", "name", "slug", "groupId", "_all"],
    ExerciseAvgAggregate: ["id", "groupId"],
    ExerciseSumAggregate: ["id", "groupId"],
    ExerciseMinAggregate: ["id", "name", "slug", "groupId"],
    ExerciseMaxAggregate: ["id", "name", "slug", "groupId"],
    GroupCount: ["Exercise", "Schedule"],
    GroupCountAggregate: ["id", "name", "_all"],
    GroupAvgAggregate: ["id"],
    GroupSumAggregate: ["id"],
    GroupMinAggregate: ["id", "name"],
    GroupMaxAggregate: ["id", "name"],
    ScheduleCountAggregate: ["id", "date", "groupId", "_all"],
    ScheduleAvgAggregate: ["id", "groupId"],
    ScheduleSumAggregate: ["id", "groupId"],
    ScheduleMinAggregate: ["id", "date", "groupId"],
    ScheduleMaxAggregate: ["id", "date", "groupId"],
    WorkoutCountAggregate: ["id", "date", "sets", "exerciseId", "_all"],
    WorkoutAvgAggregate: ["id", "exerciseId"],
    WorkoutSumAggregate: ["id", "exerciseId"],
    WorkoutMinAggregate: ["id", "date", "exerciseId"],
    WorkoutMaxAggregate: ["id", "date", "exerciseId"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UserWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "email", "password", "exercises"],
    UserOrderByWithRelationInput: ["id", "createdAt", "updatedAt", "name", "email", "password", "exercises"],
    UserWhereUniqueInput: ["id", "email", "AND", "OR", "NOT", "createdAt", "updatedAt", "name", "password", "exercises"],
    UserOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "email", "password", "exercises", "_count", "_avg", "_max", "_min", "_sum"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "email", "password", "exercises"],
    ExerciseWhereInput: ["AND", "OR", "NOT", "id", "name", "slug", "groupId", "group", "Workout"],
    ExerciseOrderByWithRelationInput: ["id", "name", "slug", "groupId", "group", "Workout"],
    ExerciseWhereUniqueInput: ["id", "name", "slug", "AND", "OR", "NOT", "groupId", "group", "Workout"],
    ExerciseOrderByWithAggregationInput: ["id", "name", "slug", "groupId", "_count", "_avg", "_max", "_min", "_sum"],
    ExerciseScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "slug", "groupId"],
    GroupWhereInput: ["AND", "OR", "NOT", "id", "name", "Exercise", "Schedule"],
    GroupOrderByWithRelationInput: ["id", "name", "Exercise", "Schedule"],
    GroupWhereUniqueInput: ["id", "name", "AND", "OR", "NOT", "Exercise", "Schedule"],
    GroupOrderByWithAggregationInput: ["id", "name", "_count", "_avg", "_max", "_min", "_sum"],
    GroupScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name"],
    ScheduleWhereInput: ["AND", "OR", "NOT", "id", "date", "groupId", "group"],
    ScheduleOrderByWithRelationInput: ["id", "date", "groupId", "group"],
    ScheduleWhereUniqueInput: ["id", "date_groupId", "AND", "OR", "NOT", "date", "groupId", "group"],
    ScheduleOrderByWithAggregationInput: ["id", "date", "groupId", "_count", "_avg", "_max", "_min", "_sum"],
    ScheduleScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "date", "groupId"],
    WorkoutWhereInput: ["AND", "OR", "NOT", "id", "date", "sets", "exerciseId", "exercise"],
    WorkoutOrderByWithRelationInput: ["id", "date", "sets", "exerciseId", "exercise"],
    WorkoutWhereUniqueInput: ["id", "AND", "OR", "NOT", "date", "sets", "exerciseId", "exercise"],
    WorkoutOrderByWithAggregationInput: ["id", "date", "sets", "exerciseId", "_count", "_avg", "_max", "_min", "_sum"],
    WorkoutScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "date", "sets", "exerciseId"],
    UserCreateInput: ["createdAt", "updatedAt", "name", "email", "password", "exercises"],
    UserUpdateInput: ["createdAt", "updatedAt", "name", "email", "password", "exercises"],
    UserCreateManyInput: ["id", "createdAt", "updatedAt", "name", "email", "password", "exercises"],
    UserUpdateManyMutationInput: ["createdAt", "updatedAt", "name", "email", "password", "exercises"],
    ExerciseCreateInput: ["name", "slug", "group", "Workout"],
    ExerciseUpdateInput: ["name", "slug", "group", "Workout"],
    ExerciseCreateManyInput: ["id", "name", "slug", "groupId"],
    ExerciseUpdateManyMutationInput: ["name", "slug"],
    GroupCreateInput: ["name", "Exercise", "Schedule"],
    GroupUpdateInput: ["name", "Exercise", "Schedule"],
    GroupCreateManyInput: ["id", "name"],
    GroupUpdateManyMutationInput: ["name"],
    ScheduleCreateInput: ["date", "group"],
    ScheduleUpdateInput: ["date", "group"],
    ScheduleCreateManyInput: ["id", "date", "groupId"],
    ScheduleUpdateManyMutationInput: ["date"],
    WorkoutCreateInput: ["date", "sets", "exercise"],
    WorkoutUpdateInput: ["date", "sets", "exercise"],
    WorkoutCreateManyInput: ["id", "date", "sets", "exerciseId"],
    WorkoutUpdateManyMutationInput: ["date", "sets"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    StringNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    UserCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "email", "password", "exercises"],
    UserAvgOrderByAggregateInput: ["id"],
    UserMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "email", "password"],
    UserMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "email", "password"],
    UserSumOrderByAggregateInput: ["id"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    GroupNullableRelationFilter: ["is", "isNot"],
    WorkoutListRelationFilter: ["every", "some", "none"],
    SortOrderInput: ["sort", "nulls"],
    WorkoutOrderByRelationAggregateInput: ["_count"],
    ExerciseCountOrderByAggregateInput: ["id", "name", "slug", "groupId"],
    ExerciseAvgOrderByAggregateInput: ["id", "groupId"],
    ExerciseMaxOrderByAggregateInput: ["id", "name", "slug", "groupId"],
    ExerciseMinOrderByAggregateInput: ["id", "name", "slug", "groupId"],
    ExerciseSumOrderByAggregateInput: ["id", "groupId"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    ExerciseListRelationFilter: ["every", "some", "none"],
    ScheduleListRelationFilter: ["every", "some", "none"],
    ExerciseOrderByRelationAggregateInput: ["_count"],
    ScheduleOrderByRelationAggregateInput: ["_count"],
    GroupCountOrderByAggregateInput: ["id", "name"],
    GroupAvgOrderByAggregateInput: ["id"],
    GroupMaxOrderByAggregateInput: ["id", "name"],
    GroupMinOrderByAggregateInput: ["id", "name"],
    GroupSumOrderByAggregateInput: ["id"],
    ScheduleDateGroupIdCompoundUniqueInput: ["date", "groupId"],
    ScheduleCountOrderByAggregateInput: ["id", "date", "groupId"],
    ScheduleAvgOrderByAggregateInput: ["id", "groupId"],
    ScheduleMaxOrderByAggregateInput: ["id", "date", "groupId"],
    ScheduleMinOrderByAggregateInput: ["id", "date", "groupId"],
    ScheduleSumOrderByAggregateInput: ["id", "groupId"],
    JsonNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    ExerciseNullableRelationFilter: ["is", "isNot"],
    WorkoutCountOrderByAggregateInput: ["id", "date", "sets", "exerciseId"],
    WorkoutAvgOrderByAggregateInput: ["id", "exerciseId"],
    WorkoutMaxOrderByAggregateInput: ["id", "date", "exerciseId"],
    WorkoutMinOrderByAggregateInput: ["id", "date", "exerciseId"],
    WorkoutSumOrderByAggregateInput: ["id", "exerciseId"],
    UserCreateexercisesInput: ["set"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    StringFieldUpdateOperationsInput: ["set"],
    UserUpdateexercisesInput: ["set", "push"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    GroupCreateNestedOneWithoutExerciseInput: ["create", "connectOrCreate", "connect"],
    WorkoutCreateNestedManyWithoutExerciseInput: ["create", "connectOrCreate", "createMany", "connect"],
    GroupUpdateOneWithoutExerciseNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    WorkoutUpdateManyWithoutExerciseNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    ExerciseCreateNestedManyWithoutGroupInput: ["create", "connectOrCreate", "createMany", "connect"],
    ScheduleCreateNestedManyWithoutGroupInput: ["create", "connectOrCreate", "createMany", "connect"],
    ExerciseUpdateManyWithoutGroupNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ScheduleUpdateManyWithoutGroupNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    GroupCreateNestedOneWithoutScheduleInput: ["create", "connectOrCreate", "connect"],
    GroupUpdateOneWithoutScheduleNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    WorkoutCreatesetsInput: ["set"],
    ExerciseCreateNestedOneWithoutWorkoutInput: ["create", "connectOrCreate", "connect"],
    WorkoutUpdatesetsInput: ["set", "push"],
    ExerciseUpdateOneWithoutWorkoutNestedInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    GroupCreateWithoutExerciseInput: ["name", "Schedule"],
    GroupCreateOrConnectWithoutExerciseInput: ["where", "create"],
    WorkoutCreateWithoutExerciseInput: ["date", "sets"],
    WorkoutCreateOrConnectWithoutExerciseInput: ["where", "create"],
    WorkoutCreateManyExerciseInputEnvelope: ["data", "skipDuplicates"],
    GroupUpsertWithoutExerciseInput: ["update", "create", "where"],
    GroupUpdateToOneWithWhereWithoutExerciseInput: ["where", "data"],
    GroupUpdateWithoutExerciseInput: ["name", "Schedule"],
    WorkoutUpsertWithWhereUniqueWithoutExerciseInput: ["where", "update", "create"],
    WorkoutUpdateWithWhereUniqueWithoutExerciseInput: ["where", "data"],
    WorkoutUpdateManyWithWhereWithoutExerciseInput: ["where", "data"],
    WorkoutScalarWhereInput: ["AND", "OR", "NOT", "id", "date", "sets", "exerciseId"],
    ExerciseCreateWithoutGroupInput: ["name", "slug", "Workout"],
    ExerciseCreateOrConnectWithoutGroupInput: ["where", "create"],
    ExerciseCreateManyGroupInputEnvelope: ["data", "skipDuplicates"],
    ScheduleCreateWithoutGroupInput: ["date"],
    ScheduleCreateOrConnectWithoutGroupInput: ["where", "create"],
    ScheduleCreateManyGroupInputEnvelope: ["data", "skipDuplicates"],
    ExerciseUpsertWithWhereUniqueWithoutGroupInput: ["where", "update", "create"],
    ExerciseUpdateWithWhereUniqueWithoutGroupInput: ["where", "data"],
    ExerciseUpdateManyWithWhereWithoutGroupInput: ["where", "data"],
    ExerciseScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "slug", "groupId"],
    ScheduleUpsertWithWhereUniqueWithoutGroupInput: ["where", "update", "create"],
    ScheduleUpdateWithWhereUniqueWithoutGroupInput: ["where", "data"],
    ScheduleUpdateManyWithWhereWithoutGroupInput: ["where", "data"],
    ScheduleScalarWhereInput: ["AND", "OR", "NOT", "id", "date", "groupId"],
    GroupCreateWithoutScheduleInput: ["name", "Exercise"],
    GroupCreateOrConnectWithoutScheduleInput: ["where", "create"],
    GroupUpsertWithoutScheduleInput: ["update", "create", "where"],
    GroupUpdateToOneWithWhereWithoutScheduleInput: ["where", "data"],
    GroupUpdateWithoutScheduleInput: ["name", "Exercise"],
    ExerciseCreateWithoutWorkoutInput: ["name", "slug", "group"],
    ExerciseCreateOrConnectWithoutWorkoutInput: ["where", "create"],
    ExerciseUpsertWithoutWorkoutInput: ["update", "create", "where"],
    ExerciseUpdateToOneWithWhereWithoutWorkoutInput: ["where", "data"],
    ExerciseUpdateWithoutWorkoutInput: ["name", "slug", "group"],
    WorkoutCreateManyExerciseInput: ["id", "date", "sets"],
    WorkoutUpdateWithoutExerciseInput: ["date", "sets"],
    ExerciseCreateManyGroupInput: ["id", "name", "slug"],
    ScheduleCreateManyGroupInput: ["id", "date"],
    ExerciseUpdateWithoutGroupInput: ["name", "slug", "Workout"],
    ScheduleUpdateWithoutGroupInput: ["date"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
